# Salt Restoring File
# -------------------
# The JRA55-do dataset provides an annual cycle climatology file to use
# for salt restoring. The climatology spans years 1955 to 2012 and is
# derived from World Ocean Atlas 2013 v2. The salinity is averaged over
# the uppermost 10-m in the water column and is better interpreted as
# salinity at 5-m depth rather than at the surface. (Tsijuno et al. 2018)
# https://doi.org/10.1016/j.ocemod.2018.07.002

# The climatology file used here was downloaded with JRA v1.4. It is
# assumed that this file is unchanged for future versions of JRA.
# This needs to be verified, but the download from ESGF is not working
# as of 13-Oct-2013

sos_climatology_WOA13v2_provided_by_JRA55-do_v1_4.nc:
	cp $(GOLD_DIR)/reanalysis/JRA55-do/v1.4.0/original/sos_input4MIPs_atmosphericState_OMIP_MRI-JRA55-do-1-4-0_gr_195501-201212-clim.nc $(@F)
	ncap2 -h -O -s 'time(:)={15,45,76,106,136,168,198,228,258,288,320,350}' $(@F) $(@F)
	ncatted -h -O -a units,time,o,c,'days since 1900-01-01 00:00:00' $(@F)
	ncatted -h -O -a long_name,time,o,c,'Day of year' $(@F)
	ncatted -h -O -a calendar,time,o,c,'julian' $(@F)
	ncatted -h -O -a modulo,time,c,c,' ' $(@F)
	ncatted -h -O -a calendar_type,time,c,c,'julian' $(@F)

salt_restore_JRA.nc: sos_climatology_WOA13v2_provided_by_JRA55-do_v1_4.nc
	$(TOOLDIR)/interp_and_fill/interp_and_fill.py \
        ocean_hgrid.nc \
        ocean_mask.nc \
	sos_climatology_WOA13v2_provided_by_JRA55-do_v1_4.nc \
        sos --fms --closest $(@F)


# JRA Runoff Files
# ----------------

JRA_VER = v1.5.0
SRC_DIR = $(GOLD_DIR)/reanalysis/JRA55-do/$(JRA_VER)/padded
OUT_DIR = ./JRA_output

# Files to be processed
RIVER_FILES = $(wildcard $(SRC_DIR)/friver*.nc)
LCALVF_FILES = $(wildcard $(SRC_DIR)/licalvf*.nc)

# Output files
OUT_RIVER_FILES = $(patsubst $(SRC_DIR)/%.nc, $(OUT_DIR)/%.compressed.nc, $(RIVER_FILES))
OUT_LCALVF_FILES = $(patsubst $(SRC_DIR)/%.nc, $(OUT_DIR)/%.compressed.nc, $(LCALVF_FILES))

# Top-level target
JRA_runoff_data: $(OUT_RIVER_FILES) $(OUT_LCALVF_FILES)
	echo $(TOOLDIR)
	@echo "All files have been processed."

# Create output directory
$(OUT_DIR):
	mkdir -p $(OUT_DIR)

# Rule to process river files
$(OUT_DIR)/friver%.compressed.nc: $(SRC_DIR)/friver%.nc | $(OUT_DIR)
	$(PYTHON37) $(TOOLDIR)/OM4_025_runoff_JRA/regrid_runoff/regrid_runoff.py \
	-p --fast_pickle ocean_hgrid.nc ocean_mask.nc $< --runoff_var friver --fms --compress $@

# Rule to process licalvf files
$(OUT_DIR)/licalvf%.compressed.nc: $(SRC_DIR)/licalvf%.nc | $(OUT_DIR)
	$(PYTHON37) $(TOOLDIR)/OM4_025_runoff_JRA/regrid_runoff/regrid_runoff.py \
	-p --fast_pickle ocean_hgrid.nc ocean_mask.nc $< --runoff_var licalvf --fms --compress $@

# If the pickle file doesn't exist, the first file to be processed will create it
pickle.regrid_runoff_A:
	@echo "Pickle file will be generated by the first file processed."

# Dependency on the pickle file for all but the first file
$(wordlist 2,$(words $(OUT_RIVER_FILES) $(OUT_LCALVF_FILES)),$(OUT_RIVER_FILES) $(OUT_LCALVF_FILES)): pickle.regrid_runoff_A

